package com.santosh.CollaborationRestServices.Controllers;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.santosh.CollaborationBackEnd.dao.FriendDAO;
import com.santosh.CollaborationBackEnd.model.Friend;

@RestController
public class FriendController {
private static Logger log=LoggerFactory.getLogger(FriendController.class);

@Autowired
private Friend friend;

@Autowired
private FriendDAO friendDAO;

@Autowired
private HttpSession session;

@GetMapping("/hello")
public String sayHello()
{
	return "  Hello from User rest service Modifed message";
}

@RequestMapping(value = "/myFriends", method = RequestMethod.GET)
public ResponseEntity<List<Friend>> getMyFriends() {
	log.debug("->->->->calling method getMyFriends");
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	List<Friend> myFriends = new ArrayList<Friend>();
	if(loggedInUserID == null)
	{
		friend.setErrorcode("404");
		friend.setErrormessage("Please login to know your friends");
		myFriends.add(friend);
		return new ResponseEntity<List<Friend>>(myFriends, HttpStatus.OK);
		
	}
   
	log.debug("getting friends of : " + loggedInUserID);
	 myFriends = friendDAO.getMyFriends(loggedInUserID);

	if (myFriends.isEmpty()) {
		log.debug("Friends does not exsit for the user : " + loggedInUserID);
		friend.setErrorcode("404");
		friend.setErrormessage("You does not have any friends");
		myFriends.add(friend);
	}
	log.debug("Send the friend list ");
	return new ResponseEntity<List<Friend>>(myFriends, HttpStatus.OK);
}

@RequestMapping(value = "/addFriend/{friendID}", method = RequestMethod.GET)
public ResponseEntity<Friend> sendFriendRequest(@PathVariable("friendID") String friendID) {
	log.debug("->->->->calling method sendFriendRequest");
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	friend.setUserID(loggedInUserID);
	friend.setFriendID(friendID);
	friend.setFriendStatus("N"); // N - New, R->Rejected, A->Accepted
	friend.setIsOnline('N');
	// Is the user already sent the request previous?
	
	//check whether the friend exist in user table or not
	if(isUserExist(friendID)==false)
	{
		friend.setErrorcode("404");
		friend.setErrormessage("No user exist with the id :" + friendID);
	}
	
	else

	if (friendDAO.get(loggedInUserID, friendID) != null) {
		friend.setErrorcode("404");
		friend.setErrormessage("You already sent the friend request to " + friendID);

	} else {
		friendDAO.save(friend);

		friend.setErrorcode("200");
		friend.setErrormessage("Friend request successfull.." + friendID);
	}

	return new ResponseEntity<Friend>(friend, HttpStatus.OK);

}



private boolean isUserExist(String id)
{
	if(userDAO.get(id)==null)
		return false;
	else
		return true;
}


private boolean isFriendRequestAvailabe(String friendID)
{
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	
	if(friendDAO.get(loggedInUserID,friendID)==null)
		return false;
	else
		return true;
}

@RequestMapping(value = "/unFriend/{friendID}", method = RequestMethod.PUT)
public ResponseEntity<Friend> unFriend(@PathVariable("friendID") String friendID) {
	log.debug("->->->->calling method unFriend");
	updateRequest(friendID, "U");
	return new ResponseEntity<Friend>(friend, HttpStatus.OK);

}

@RequestMapping(value = "/rejectFriend/{friendID}", method = RequestMethod.PUT)
public ResponseEntity<Friend> rejectFriendFriendRequest(@PathVariable("friendID") String friendID) {
	log.debug("->->->->calling method rejectFriendFriendRequest");

	updateRequest(friendID, "R");
	return new ResponseEntity<Friend>(friend, HttpStatus.OK);

}

@RequestMapping(value = "/accepttFriend/{friendID}", method = RequestMethod.PUT)
public ResponseEntity<Friend> acceptFriendFriendRequest(@PathVariable("friendID") String friendID) {
	log.debug("->->->->calling method acceptFriendFriendRequest");
    
	friend = updateRequest(friendID, "A");
	return new ResponseEntity<Friend>(friend, HttpStatus.OK);

}

private Friend updateRequest(String friendID, String status) {
	log.debug("Starting of the method updateRequest");
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	log.debug("loggedInUserID : " + loggedInUserID);
	
	if(isFriendRequestAvailabe(friendID)==false)
	{
		friend.setErrorcode("404");
		friend.setErrormessage("The request does not exist.  So you can not update to "+status);
	}
	
	if (status.equals("A") || status.equals("R"))
		friend = friendDAO.get(friendID, loggedInUserID);
	else
		friend = friendDAO.get(loggedInUserID, friendID);
	friend.setFriendStatus(status); // N - New, R->Rejected, A->Accepted

	friendDAO.update(friend);

	friend.setErrorcode("200");
	friend.setErrorMessage(
			"Request from   " + friend.getUserID() + " To " + friend.getFriendID() + " has updated to :" + status);
	log.debug("Ending of the method updateRequest");
	return friend;

}

@RequestMapping(value = "/getMyFriendRequests/", method = RequestMethod.GET)
public ResponseEntity<List<Friend>> getMyFriendRequests() {
	log.debug("->->->->calling method getMyFriendRequests");
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	List<Friend> myFriendRequests = friendDAO.getNewFriendRequests(loggedInUserID);
	return new ResponseEntity<List<Friend>>(myFriendRequests, HttpStatus.OK);

}


@RequestMapping("/getRequestsSendByMe")
public ResponseEntity<List<Friend>>  getRequestsSendByMe()
{
	log.debug("->->->->calling method getRequestsSendByMe");
	
	String loggedInUserID = (String) session.getAttribute("loggedInUserID");
	List<Friend> requestSendByMe = friendDAO.getRequestsSendByMe(loggedInUserID);
	
	log.debug("->->->->Ending method getRequestsSendByMe");
	
	return new ResponseEntity<List<Friend>>(requestSendByMe, HttpStatus.OK);
	
}

}
